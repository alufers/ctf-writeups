ct = 115139400156559163067983730101733651044517302092738415230761576068368627143021367186957088381449359016008152481518188727055259259438853550911696408473202582626669824350180493062986420292176306828782792330214492239993109523633165689080824380627230327245751549253757852668981573771168683865251547238022125676591
p = 8200291410122039687250292442109878676753589397818032770561720051299309477271228768886216860911120846659270343793701939593802424969673253182414886645533851
shares = [((6086926015098867242735222866983726204461220951103360009696454681019399690511733951569533187634005519163004817081362909518890288475814570715924211956186561, 180544606207615749673679003486920396349643373592065733048594170223181990080540522443341611038923128944258091068067227964575144365802736335177084131200721), 358596622670209028757821020375422468786000283337112662091012759053764980353656144756495576189654506534688021724133853284750462313294554223173599545023200), ((1386358358863317578119640490115732907593775890728347365516358215967843845703994105707232051642221482563536659365469364255206757315665759154598917141827974, 4056544903690651970564657683645824587566358589111269611317182863269566520886711060942678307985575546879523617067909465838713131842847785502375410189119098), 7987498083862441578197078091675653094495875014017487290616050579537158854070043336559221536943501617079375762641137734054184462590583526782938983347248670), ((656537687734778409273502324331707970697362050871244803755641285452940994603617400730910858122669191686993796208644537023001462145198921682454359699163851, 7168506530157948082373212337047037955782714850395068869680326068416218527056283262697351993204957096383236610668826321537260018440150283660410281255549702), 1047085825033120721880384312942308021912742666478829834943737959325181775143075576517355925753610902886229818331095595005460339857743811544053574078662507), ((5258797924027715460925283932681628978641108698338452367217155856384763787158334845391544834908979711067046042420593321638221507208614929195171831766268954, 4425317882205634741873988391516678208287005927456949928854593454650522868601946818897817646576217811686765487183061848994765729348913592238613989095356071), 866086803634294445156445022661535120113351818468169243952864826652249446764789342099913962106165135623940932785868082548653702309009757035399759882130676)]
shares = [((Zmod(p)(x), Zmod(p)(y)), Zmod(p)(w)) for (x, y), w in shares]

M = Matrix(QQ, 11, 11)
C = 2**128
M[0]  = [*(x    for (x, y), w in shares), C, 0, 0, 0, 0, 0, 0   ]
M[1]  = [*(x**2 for (x, y), w in shares), 0, C, 0, 0, 0, 0, 0   ]
M[2]  = [*(x**3 for (x, y), w in shares), 0, 0, C, 0, 0, 0, 0   ]
M[3]  = [*(y    for (x, y), w in shares), 0, 0, 0, C, 0, 0, 0   ]
M[4]  = [*(y**2 for (x, y), w in shares), 0, 0, 0, 0, C, 0, 0   ]
M[5]  = [*(y**3 for (x, y), w in shares), 0, 0, 0, 0, 0, C, 0   ]
M[6]  = [*(-w   for (x, y), w in shares), 0, 0, 0, 0, 0, 0, C**2]
M[7]  = [p, 0, 0, 0                     , 0, 0, 0, 0, 0, 0, 0   ]
M[8]  = [0, p, 0, 0                     , 0, 0, 0, 0, 0, 0, 0   ]
M[9]  = [0, 0, p, 0                     , 0, 0, 0, 0, 0, 0, 0   ]
M[10] = [0, 0, 0, p                     , 0, 0, 0, 0, 0, 0, 0   ]
L = M.LLL()
assert L[0][10] == C**2, L
print('z_1*c + s = ', -L[0][0])
print('z_2*c + s = ', -L[0][1])
print('z_3*c + s = ', -L[0][2])
print('z_4*c + s = ', -L[0][3])
print('a_1 = ', L[0][4] // C)
print('a_2 = ', L[0][5] // C)
print('a_3 = ', L[0][6] // C)
print('b_1 = ', L[0][7] // C)
print('b_2 = ', L[0][8] // C)
print('b_3 = ', L[0][9] // C)
assert all(x % C == 0 for x in L[0][4:10])
coeffs = [x // C for x in L[0][4:10]]

w = [-L[0][0], -L[0][1], -L[0][2], -L[0][3]]
c = gcd(w[i] - w[j] for i in range(4) for j in range(4))
print('c = ', c)
coeffs.append(c)

M = matrix(QQ, [[c, 1, 0], [w[0], 0, C]])
L = M.LLL()
assert L[1][2] == C, L
print('s = ', L[1][0])
print('z_1 = ', -L[1][1])
coeffs.append(L[1][0])

key = 0
for coeff in coeffs:
    key <<= 128
    key ^^= int(coeff)
print(int(key^^ct).to_bytes(16*len(coeffs), 'big'))
